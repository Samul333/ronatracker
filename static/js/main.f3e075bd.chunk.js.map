{"version":3,"sources":["Components/Cards/cards.module.css","Components/Cards/Cards.jsx","Api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","index.js","Components/Chart/chart.module.css","app.module.css"],"names":["module","exports","Cards","data","confirmed","lastUpdate","recovered","deaths","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","url","fetchData","a","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","Chart","useState","setDailyData","useEffect","fetchAPI","LineChart","length","labels","datasets","label","borderColor","fill","CountryPicker","App","state","this","setState","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3e075bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__3sL2R\",\"card\":\"cards_card__1SQx3\",\"infected\":\"cards_infected__stReH\",\"recovered\":\"cards_recovered__3B0K4\",\"deaths\":\"cards_deaths__44Qiy\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport styles from './cards.module.css'\r\nimport Countup from 'react-countup'\r\nimport cx from 'classnames'\r\nconst Cards = ({data: {confirmed,lastUpdate,recovered,deaths}}) => {\r\n\r\n    if(!confirmed){\r\n        return 'Loadinng'\r\n    }\r\n    return (\r\n        \r\n        <div className={styles.container}>\r\n           \r\n            <Grid container spacing={3} justify=\"center\">\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n\r\n                                </Typography>\r\n\r\n                             <Typography variant=\"h5\">\r\n                                       <Countup start={0}\r\n                                       end={confirmed.value}\r\n                                       duration={2.5}\r\n                                       seperator=\",\" />\r\n\r\n                                </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n\r\n                                </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases\r\n\r\n                                </Typography>\r\n\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                        <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered  </Typography>\r\n\r\n                        \r\n                            <Typography variant=\"h5\">\r\n                                       <Countup start={0}\r\n                                       end={recovered.value}\r\n                                       duration={2.5}\r\n                                       seperator=\",\" />\r\n\r\n                                </Typography>\r\n                                <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n\r\n                                </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of Recovered cases\r\n\r\n                                </Typography>\r\n\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n\r\n                                </Typography>\r\n\r\n                                <Typography variant=\"h5\">\r\n                                       <Countup start={0}\r\n                                       end={deaths.value}\r\n                                       duration={2.5}\r\n                                       seperator=\",\" />\r\n\r\n                                </Typography>\r\n                                <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n\r\n                                </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of Deaths Caused\r\n\r\n                                </Typography>\r\n\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\n\r\nexport const fetchData= async()=>{\r\n    try {\r\n        const { data:{confirmed,recovered,deaths,lastUpdate} } = await axios.get(url)\r\n        const modifiedData =  {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n\r\n        }\r\n        return modifiedData\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async ()=>{\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n      \r\n        const modifiedData = data.map((dailyData)=>({\r\n                confirmed: dailyData.confirmed.total,\r\n                deaths: dailyData.deaths.total,\r\n                date: dailyData.reportDate\r\n        }));\r\n         \r\n        return modifiedData\r\n        \r\n    }catch(error){\r\n\r\n    }\r\n}","import React,{useState,useEffect} from 'react'\r\nimport {fetchDailyData} from '../../Api'\r\nimport {Line} from 'react-chartjs-2'\r\nimport styles from './chart.module.css'\r\nfunction Chart() {\r\n\r\n    const [dailyData,setDailyData]= useState({})\r\n\r\n    useEffect(()=>{\r\n\r\n        const fetchAPI = async ()=>{\r\n            setDailyData( await fetchDailyData())\r\n            \r\n        }\r\n        fetchAPI()\r\n        \r\n      \r\n    },[]);\r\n\r\n    const LineChart=(\r\n        dailyData.length\r\n        ?\r\n        (\r\n            <Line \r\n            data={{\r\n                labels: dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    data: dailyData.map(({confirmed})=>confirmed),\r\n                    label:'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill:true\r\n                },{\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label:'Deaths',\r\n                    borderColor: 'red',\r\n                    fill:true\r\n                }],\r\n            }}\r\n        /> ) : null\r\n\r\n    )\r\n\r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n          {LineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\n\r\nfunction CountryPicker() {\r\n    return (\r\n        <div>\r\n            Cuntry Picker\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React, { Component } from 'react'\n\n//Components\nimport Cards from './Components/Cards/Cards'\nimport Chart from './Components/Chart/Chart'\nimport CountryPicker from './Components/CountryPicker/CountryPicker'\nimport {fetchData} from './Api'\n//css\nimport styles from './app.module.css'\nexport class App extends Component {\n\n  state={\n    data:{},\n    }\n  \n  async componentDidMount(){\n    const data = await fetchData()\n    this.setState({\n      data\n    })\n  }\n\n\n  render() {\n    const {data} = this.state;\n    return (\n      <div className={styles.container}>\n        <h1>The Roona Tracker</h1>\n        <Cards data={data }/>\n        <CountryPicker/>\n        <Chart/>\n        \n      </div>\n    )\n  }\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__1zouZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__1DVvw\"};"],"sourceRoot":""}